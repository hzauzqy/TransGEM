import argparse
import numpy as np
import selfies as sf


parser = argparse.ArgumentParser()
parser.add_argument("--data_path", type=str, default='./data/', help="data dir")
parser.add_argument("--out_path", type=str, default='./out/', help="output dir")
parser.add_argument("--dataset", type=str, default='subLINCS', help="subLINCS,HCC515,PC,nsclc")
parser.add_argument("--gene_encoder", type=str, default='tenfold_binary', help="value,one_hot,binary,tenfold_binary")
parser.add_argument("--gpu", type=str, default="cuda:0", help="CUDA device ids")

parser.add_argument("--hidden_dim", type=int, default=64, help="hidden size of transformer decoder")
parser.add_argument('--ff_dim', type=int, default=512)
parser.add_argument('--PE_dropout', type=float, default=0.1)
parser.add_argument("--TF_dropout", type=float, default=0.1)
parser.add_argument('--TF_N', type=int, default=6, help="number of transformer decoder layer")
parser.add_argument("--TF_H", type=int, default=8, help="number of transformer decoder head")
parser.add_argument("--TF_act", type=str, default="relu")

parser.add_argument("--batch_size", type=int, default=4, help="number of batch_size")
parser.add_argument("--epochs", type=int, default=200, help="number of epochs")
parser.add_argument("--lr", type=float, default=0.0001, help="learning rate of adam")

parser.add_argument("--cell_line", type=str, default="", help="cell line names of disease")
parser.add_argument("--pad_idx", type=int, default=1, help="id of pad symbol")
parser.add_argument("--start_idx", type=int, default=2, help="id of start symbol")
parser.add_argument("--end_idx", type=int, default=3, help="id of end symbol")
parser.add_argument("--max_len", type=int, default=80, help="maximum length of generated molecule")
parser.add_argument("--vocab_size", type=int, default=52)

parser.add_argument("--k", type=int, default=30, help="number of molecules generated in a single beam search")
parser.add_argument("--alpha", type=int, default=0.9, help="the weight of the length and score of molecules generated by bundle search")
parser.add_argument("--seq_num", type=int, default=3000, help="number of molecules ultimately retained")

args=parser.parse_args()


def anti_bool(mask):
    return mask == 0

def onehot_encoding(x, allowable_set):
    if x not in allowable_set:
        raise Exception("input {0} not in allowable set{1}:".format(
            x, allowable_set))
    return [x == s for s in allowable_set]


def onehot_encoding_unk(x, allowable_set):
    """Maps inputs not in the allowable set to the last element."""
    if x not in allowable_set:
        x = allowable_set[-1]
    return [x == s for s in allowable_set]


def cellline_encode(cellline_List):
    feat = []
    for i in cellline_List:
        result = onehot_encoding_unk(i, cell_type)
        feat.append(result)
    return np.array(feat)

def gene_ex(gene_e):
    gene_ex_init = []
    for i in gene_e:
        i = i.split(";")[:-1]
        a = []
        for j in i:
            a.append(float(j))
        gene_ex_init.append(a)
        
    return np.array(gene_ex_init)

def load_tensor(file_name, dtype):
    return [dtype(d) for d in np.load(file_name + '.npy' ,allow_pickle=True)]

def selfies2id(selfies_List, TGT_stoi):
    selfiesID = []
    src = []
    src_len = []
    for i in selfies_List:
        i = i[2:-2]
        src.append(i.split("', '"))
        src_len.append(len(i.split("', '")))
    max_len = max(src_len) + 2

    for i in src:
        a = []
        a.append(TGT_stoi[SOS_WORD])
        for j in i:
            if j in list(TGT_stoi):
                a.append(TGT_stoi[j])
            else:
                a.append(TGT_stoi[PAD_WORD])
        a.append(TGT_stoi[EOS_WORD])
        selfiesID.append(a)

    return np.array(selfiesID), max_len, len(TGT_stoi)

def id2seq(ID, TGT_itos):
    seq=''
    for i in ID[1:]:
        if i == args.end_idx: break
        seq += TGT_itos[i]
    
    return sf.decoder(seq)

cell_type = ['MCF7', 'PC3', 'A549', 'A375', 'HT29', 'HA1E', 'MCF10A', 'YAPC', 'HELA', 'MDAMB231', 'HEK293', 'THP1', 'JURKAT', 'HEPG2', 'UNK']

PAD_WORD = '<pad>'
UNK_WORD = '<unk>'
EOS_WORD = '<eos>'
SOS_WORD = '<sos>'
MASK_WORD = '<mask>'

